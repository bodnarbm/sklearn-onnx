
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorial/plot_gbegin_dataframe.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_tutorial_plot_gbegin_dataframe.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorial_plot_gbegin_dataframe.py:


Dataframe as an input
=====================

.. index:: dataframe

A pipeline usually ingests data as a matrix. It may be converted in a matrix
if all the data share the same type. But data held in a dataframe
have usually multiple types, float, integer or string for categories.
ONNX also supports that case.

A dataset with categories
+++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 18-57

.. code-block:: default

    from mlinsights.plotting import pipeline2dot
    import numpy
    import pprint
    from mlprodict.onnx_conv import guess_schema_from_data
    from onnxruntime import InferenceSession
    from pyquickhelper.helpgen.graphviz_helper import plot_graphviz
    from mlprodict.onnxrt import OnnxInference
    from mlprodict.onnx_conv import to_onnx as to_onnx_ext
    from skl2onnx import to_onnx
    from pandas import DataFrame
    from sklearn.pipeline import Pipeline
    from sklearn.compose import ColumnTransformer
    from sklearn.preprocessing import OneHotEncoder
    from sklearn.ensemble import RandomForestClassifier


    data = DataFrame([
        dict(CAT1='a', CAT2='c', num1=0.5, num2=0.6, y=0),
        dict(CAT1='b', CAT2='d', num1=0.4, num2=0.8, y=1),
        dict(CAT1='a', CAT2='d', num1=0.5, num2=0.56, y=0),
        dict(CAT1='a', CAT2='d', num1=0.55, num2=0.56, y=1),
        dict(CAT1='a', CAT2='c', num1=0.35, num2=0.86, y=0),
        dict(CAT1='a', CAT2='c', num1=0.5, num2=0.68, y=1),
    ])

    cat_cols = ['CAT1', 'CAT2']
    train_data = data.drop('y', axis=1)


    categorical_transformer = Pipeline([
        ('onehot', OneHotEncoder(sparse=False, handle_unknown='ignore'))])
    preprocessor = ColumnTransformer(
        transformers=[
            ('cat', categorical_transformer, cat_cols)],
        remainder='passthrough')
    pipe = Pipeline([('preprocess', preprocessor),
                     ('rf', RandomForestClassifier())])
    pipe.fit(train_data, data['y'])






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-15 {color: black;background-color: white;}#sk-container-id-15 pre{padding: 0;}#sk-container-id-15 div.sk-toggleable {background-color: white;}#sk-container-id-15 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-15 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-15 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-15 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-15 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-15 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-15 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-15 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-15 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-15 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-15 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-15 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-15 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-15 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-15 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-15 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-15 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-15 div.sk-item {position: relative;z-index: 1;}#sk-container-id-15 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-15 div.sk-item::before, #sk-container-id-15 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-15 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-15 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-15 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-15 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-15 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-15 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-15 div.sk-label-container {text-align: center;}#sk-container-id-15 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-15 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-15" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;preprocess&#x27;,
                     ColumnTransformer(remainder=&#x27;passthrough&#x27;,
                                       transformers=[(&#x27;cat&#x27;,
                                                      Pipeline(steps=[(&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,
                                                                                     sparse=False))]),
                                                      [&#x27;CAT1&#x27;, &#x27;CAT2&#x27;])])),
                    (&#x27;rf&#x27;, RandomForestClassifier())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-50" type="checkbox" ><label for="sk-estimator-id-50" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;preprocess&#x27;,
                     ColumnTransformer(remainder=&#x27;passthrough&#x27;,
                                       transformers=[(&#x27;cat&#x27;,
                                                      Pipeline(steps=[(&#x27;onehot&#x27;,
                                                                       OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,
                                                                                     sparse=False))]),
                                                      [&#x27;CAT1&#x27;, &#x27;CAT2&#x27;])])),
                    (&#x27;rf&#x27;, RandomForestClassifier())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-51" type="checkbox" ><label for="sk-estimator-id-51" class="sk-toggleable__label sk-toggleable__label-arrow">preprocess: ColumnTransformer</label><div class="sk-toggleable__content"><pre>ColumnTransformer(remainder=&#x27;passthrough&#x27;,
                      transformers=[(&#x27;cat&#x27;,
                                     Pipeline(steps=[(&#x27;onehot&#x27;,
                                                      OneHotEncoder(handle_unknown=&#x27;ignore&#x27;,
                                                                    sparse=False))]),
                                     [&#x27;CAT1&#x27;, &#x27;CAT2&#x27;])])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-52" type="checkbox" ><label for="sk-estimator-id-52" class="sk-toggleable__label sk-toggleable__label-arrow">cat</label><div class="sk-toggleable__content"><pre>[&#x27;CAT1&#x27;, &#x27;CAT2&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-53" type="checkbox" ><label for="sk-estimator-id-53" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;, sparse=False)</pre></div></div></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-54" type="checkbox" ><label for="sk-estimator-id-54" class="sk-toggleable__label sk-toggleable__label-arrow">remainder</label><div class="sk-toggleable__content"><pre>[&#x27;num1&#x27;, &#x27;num2&#x27;]</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-55" type="checkbox" ><label for="sk-estimator-id-55" class="sk-toggleable__label sk-toggleable__label-arrow">passthrough</label><div class="sk-toggleable__content"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-56" type="checkbox" ><label for="sk-estimator-id-56" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestClassifier</label><div class="sk-toggleable__content"><pre>RandomForestClassifier()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 58-59

Display.

.. GENERATED FROM PYTHON SOURCE LINES 59-65

.. code-block:: default


    dot = pipeline2dot(pipe, train_data)
    ax = plot_graphviz(dot)
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)




.. image-sg:: /auto_tutorial/images/sphx_glr_plot_gbegin_dataframe_001.png
   :alt: plot gbegin dataframe
   :srcset: /auto_tutorial/images/sphx_glr_plot_gbegin_dataframe_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 66-70

Conversion to ONNX
++++++++++++++++++

Function *to_onnx* does not handle dataframes.

.. GENERATED FROM PYTHON SOURCE LINES 70-77

.. code-block:: default



    try:
        onx = to_onnx(pipe, train_data[:1])
    except NotImplementedError as e:
        print(e)








.. GENERATED FROM PYTHON SOURCE LINES 78-79

But it possible to use an extended one.

.. GENERATED FROM PYTHON SOURCE LINES 79-85

.. code-block:: default



    onx = to_onnx_ext(
        pipe, train_data[:1],
        options={RandomForestClassifier: {'zipmap': False}})








.. GENERATED FROM PYTHON SOURCE LINES 86-88

Graph
+++++

.. GENERATED FROM PYTHON SOURCE LINES 88-96

.. code-block:: default



    oinf = OnnxInference(onx)
    ax = plot_graphviz(oinf.to_dot())
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)





.. image-sg:: /auto_tutorial/images/sphx_glr_plot_gbegin_dataframe_002.png
   :alt: plot gbegin dataframe
   :srcset: /auto_tutorial/images/sphx_glr_plot_gbegin_dataframe_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 97-101

Prediction with ONNX
++++++++++++++++++++

*onnxruntime* does not support dataframes.

.. GENERATED FROM PYTHON SOURCE LINES 101-109

.. code-block:: default



    sess = InferenceSession(onx.SerializeToString())
    try:
        sess.run(None, train_data)
    except Exception as e:
        print(e)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    run(): incompatible function arguments. The following argument types are supported:
        1. (self: onnxruntime.capi.onnxruntime_pybind11_state.InferenceSession, arg0: List[str], arg1: Dict[str, object], arg2: onnxruntime.capi.onnxruntime_pybind11_state.RunOptions) -> List[object]

    Invoked with: <onnxruntime.capi.onnxruntime_pybind11_state.InferenceSession object at 0x7ff2739429b0>, ['label', 'probabilities'],   CAT1 CAT2  num1  num2
    0    a    c  0.50  0.60
    1    b    d  0.40  0.80
    2    a    d  0.50  0.56
    3    a    d  0.55  0.56
    4    a    c  0.35  0.86
    5    a    c  0.50  0.68, None




.. GENERATED FROM PYTHON SOURCE LINES 110-111

Let's use a shortcut

.. GENERATED FROM PYTHON SOURCE LINES 111-117

.. code-block:: default


    oinf = OnnxInference(onx)
    got = oinf.run(train_data)
    print(pipe.predict(train_data))
    print(got['label'])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0 1 0 1 0 1]
    [0 1 0 1 0 1]




.. GENERATED FROM PYTHON SOURCE LINES 118-119

And probilities.

.. GENERATED FROM PYTHON SOURCE LINES 119-123

.. code-block:: default


    print(pipe.predict_proba(train_data))
    print(got['probabilities'])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[0.79 0.21]
     [0.34 0.66]
     [0.73 0.27]
     [0.28 0.72]
     [0.71 0.29]
     [0.34 0.66]]
    [[0.79       0.20999998]
     [0.34000003 0.65999997]
     [0.73       0.26999998]
     [0.27999997 0.72      ]
     [0.71000004 0.28999996]
     [0.34000003 0.65999997]]




.. GENERATED FROM PYTHON SOURCE LINES 124-134

It looks ok. Let's dig into the details to
directly use *onnxruntime*.

Unhide conversion logic with a dataframe
++++++++++++++++++++++++++++++++++++++++

A dataframe can be seen as a set of columns with
different types. That's what ONNX should see:
a list of inputs, the input name is the column name,
the input type is the column type.

.. GENERATED FROM PYTHON SOURCE LINES 134-140

.. code-block:: default



    init = guess_schema_from_data(train_data)

    pprint.pprint(init)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [('CAT1', StringTensorType(shape=[None, 1])),
     ('CAT2', StringTensorType(shape=[None, 1])),
     ('num1', DoubleTensorType(shape=[None, 1])),
     ('num2', DoubleTensorType(shape=[None, 1]))]




.. GENERATED FROM PYTHON SOURCE LINES 141-142

Let's use float instead.

.. GENERATED FROM PYTHON SOURCE LINES 142-151

.. code-block:: default



    for c in train_data.columns:
        if c not in cat_cols:
            train_data[c] = train_data[c].astype(numpy.float32)

    init = guess_schema_from_data(train_data)
    pprint.pprint(init)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [('CAT1', StringTensorType(shape=[None, 1])),
     ('CAT2', StringTensorType(shape=[None, 1])),
     ('num1', FloatTensorType(shape=[None, 1])),
     ('num2', FloatTensorType(shape=[None, 1]))]




.. GENERATED FROM PYTHON SOURCE LINES 152-153

Let's convert with *skl2onnx* only.

.. GENERATED FROM PYTHON SOURCE LINES 153-158

.. code-block:: default


    onx2 = to_onnx(
        pipe, initial_types=init,
        options={RandomForestClassifier: {'zipmap': False}})








.. GENERATED FROM PYTHON SOURCE LINES 159-163

Let's run it with onnxruntime.
We need to convert the dataframe into a dictionary
where column names become keys, and column values become
values.

.. GENERATED FROM PYTHON SOURCE LINES 163-168

.. code-block:: default


    inputs = {c: train_data[c].values.reshape((-1, 1))
              for c in train_data.columns}
    pprint.pprint(inputs)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'CAT1': array([['a'],
           ['b'],
           ['a'],
           ['a'],
           ['a'],
           ['a']], dtype=object),
     'CAT2': array([['c'],
           ['d'],
           ['d'],
           ['d'],
           ['c'],
           ['c']], dtype=object),
     'num1': array([[0.5 ],
           [0.4 ],
           [0.5 ],
           [0.55],
           [0.35],
           [0.5 ]], dtype=float32),
     'num2': array([[0.6 ],
           [0.8 ],
           [0.56],
           [0.56],
           [0.86],
           [0.68]], dtype=float32)}




.. GENERATED FROM PYTHON SOURCE LINES 169-170

Inference.

.. GENERATED FROM PYTHON SOURCE LINES 170-178

.. code-block:: default


    sess2 = InferenceSession(onx2.SerializeToString())

    got2 = sess2.run(None, inputs)

    print(pipe.predict(train_data))
    print(got2[0])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0 1 0 1 0 1]
    [0 1 0 1 0 1]




.. GENERATED FROM PYTHON SOURCE LINES 179-180

And probilities.

.. GENERATED FROM PYTHON SOURCE LINES 180-183

.. code-block:: default


    print(pipe.predict_proba(train_data))
    print(got2[1])




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[0.79 0.21]
     [0.34 0.66]
     [0.73 0.27]
     [0.28 0.72]
     [0.71 0.29]
     [0.34 0.66]]
    [[0.78999996 0.21000002]
     [0.34000033 0.65999967]
     [0.73       0.27      ]
     [0.2800004  0.7199996 ]
     [0.71000004 0.29      ]
     [0.34000033 0.65999967]]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.130 seconds)


.. _sphx_glr_download_auto_tutorial_plot_gbegin_dataframe.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_gbegin_dataframe.py <plot_gbegin_dataframe.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_gbegin_dataframe.ipynb <plot_gbegin_dataframe.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
